which(a==min(a))
###########################
a[which(a==min(a))]
which.min(a)
which(a>14 & a<24)
a[which(a>14 & a<24)]
which(a>9 & a<10)
which(a>9 | a<10)
# Rep function
a = rep(1:5,10)
a
b = c(1:3,length=10)
b
b = c(1:3,10)
b
a = rep(c("SIN","DHU"),5)
a
a = rep(1:4,5:8)
a
a = rep(1:4,2:4)
a = rep(1:4,c(2,4,1,5)) # giving how many times each element has to be repeated.
a
a = rep(1:4,each=3)
a
a = rep(1:4,each=3,2)
a
source('E:/Sindhu/projects/R_prog/rep.R')
source('E:/Sindhu/projects/R_prog/rep.R')
b = seq(from=1,to=10,by=2)
b = seq(from=1,to=10,by=-2) #error
b = seq(from=1,to=-10,by=-2)
b
b = seq(from=1,to=10,length=5)
b
b = seq(from=1,to=10,by=2,length=3)
b = seq(from=1,by=2,length=30)
b
#check availability
2%in%a
a%in%b
a%in%b
a
b
is.element(a,b)
a = 1:5
m1 = matrix(a,ncol=3)
m1 = matrix(a,ncol=5)
m1
#Creating Matrix
a = 1:6
m1 = matrix(a,ncol=2)
m1
m1[2,1]
m1[2,1] = 9
m1
m1 *2
a = 1:6
m1 = matrix(a,ncol=2)
m2 = matrix(a,nrow=2)
m2
m2 = matrix(a,nrow=2,byrow=F)
m2
m1[,3]
m1[,2]
m1
m1[2,]
m1[-1,0]
m1[-1,]
m1[,-1]
m1[c(1,2),3]
m1
m1[c(1,2),2]
m1[-c(1,2),2
m1[-c(1,2),2
m1[-c(1,2),2]
m[2,]
m1[2,]
m1[c(1,2),2] = c(11,12)
m1
# adding rows and columns
a = 1:4
b = 5:7
d = rbind(a,b)
# adding rows and columns
a = 1:4
b = 5:8
d = rbind(a,b)
d
# adding rows and columns
a = 1:4
b = 5:8
d = rbind(a,b)
e = 11:12
f = cbind(d,f)
# adding rows and columns
a = 1:4
b = 5:8
d = rbind(a,b)
e = 11:12
f = cbind(d,e)
f
# adding rows and columns
a = 1:4
b = 5:8
d = rbind(a,b)
e = 11:13
f = cbind(d,e)
a=1:7
b=2:10
union(a,b)
intersect(a,b)
setdiff(a,b)
setdiff(b,a)
a = 1:6
m = matrix(a)
m
a = 1:6
m = matrix(a)
m1 = matrix(a,ncol=2)
#runif - randomly generates numbers in the given range. default range is 0-1.
data = runif(30,1,9)
data
data1 = floor(runif(20,1,7))
#runif - randomly generates numbers in the given range. default range is 0-1.
data = runif(30,1,9)
data1
data1 = floor(runif(20,1,7))
#runif - randomly generates numbers in the given range. default range is 0-1.
data = runif(30,1,9)
data1
mean(data1)
#median
meadian(data1)
#median
median(data1)
mode(data1)
unique(data1)
match(data1,unique(data1))
data1 = floor(runif(20,1,7))
#mean
mean(data1)
#median
median(data1)
unique(data1)
match(data1,unique(data1))
data2 = floor(runif(20,1,7))
un = unique(data2)
match(data2,un)
data2 = floor(runif(20,1,7))
un = unique(data2)
m = match(data2,un)
data2
un
m
which(m)
max(m)
tabulate(m)
which.max(tabulate(m))
tabulate(data2)
which.max(tabulate(data2))
d = floor(runif(20,1,7))
tabulate(d)
d
d = floor(runif(20,1,7))
max(tabulate(d))
d = floor(runif(20,1,7))
which.max(tabulate(d))
d = floor(runif(20,1,7))
which.max(tabulate(d))
d
d = floor(runif(20,11,17))
which.max(tabulate(d))
d
d1 = c(1:5,2:4,1:6,3:6,1:3,2:5,3:4)
which.max(tabulate(d2))
which.max(tabulate(d1))
d1
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
which.max(tabulate(d1))
d1
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
max(tabulate(d1))
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
unique(max(tabulate(d1)))
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
unique(tabulate(d1)==max(tabulate(d1)))
d3 = c(rep(13:14,6),7:12,7:11)
d3
d3 = c(rep(13:14,6),7:12,7:11)
un = unique(d3)
m = match(d3,un)
t = tabulate(m)
t
which.max(t)
d3 = c(rep(13:14,6),7:12,7:11)
un = unique(d3)
m = match(d3,un)
t = tabulate(m)
which.max(t)
d3 = c(rep(13:14,6),7:12,7:11)
which.max(tabulate(d3))
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
uniq = unique(d1)
which.max(tabulate(d1))
uniq[tabulate(d1) == max(tabulate(d1))]
tabulate(d1)
max(tabulate(d1))
d1 = c(1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
uniq = unique(d1)
which.max(tabulate(d1))
uniq[tabulate(d1) == max(tabulate(d1))]
unique[tabulate(d1) == max(tabulate(d1))]
unique(d1)
tabulate(d1) == max(tabulate(d1))
d1 = c(11:15,1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
uniq = unique(d1)
d1
uniq
uniq[tabulate(d1) == max(tabulate(d1))]
tabulate(d1) == max(tabulate(d1))
d1 = c(11:15,1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
uniq = unique(d1)
which.max(tabulate(d1))
uniq[tabulate(d1) == max(tabulate(d1))]
tabulate(d1) == max(tabulate(d1)
tabulate(d1) == max(tabulate(d1))
tabulate(d1) == max(tabulate(d1))
max(d1)
tabulate(d1)
max(tabulate(d1))
unique(d1)
uniq = sort(unique(d1))
uniq
d1 = c(11:15,1:5,2:4,2:4,2:3,2:3,2:4,1:5,1:6)
uniq = sort(unique(d1))
which.max(tabulate(d1))
uniq[tabulate(d1) == max(tabulate(d1))]
#Variance and standard deviation
v = var(d3)
st = sd(d3)
q = IQR(d3)
sort(d3)
n(d3)
count(d3)
size(d3)
d3
length(d3)
quantile(d3)
hist(d3)
hist(d3, ,sd(d3))
range(d3)
hist(d3, ,sd(d3),range(d3))
hist(d3, ,sd(d3),range(d3))
hist(d1, ,sd(d1),range(d1))
library(DAAG)
install.packages(DAAG)
library(help=="datasets")
library(datasets)
library(help = "datasets")
datasets-package {mtcars}
datasets-package{mtcars}
datasets-package(mtcars)
assign('sin', 100)
sin
## Vecotrs Exercises
p = c(2,4,1,5)
q = c(1,2,3)
p+q
## Vecotrs Exercises
p = c(2,4,1,5)
q = c(7,2,3)
p+q
Age <- c(22, 25, 18, 20)
Name <- c("James", "Mathew", "Olivia", "Stella")
Gender <- c("M", "M", "F", "F")
DataFrame = data.frame(Age,Name,Gender)
subset(DataFrame,Gender=="M")
DataFrame = data.frame(c(Age,Name,Gender))
subset(DataFrame,Gender=="M")
DataFrame = data.frame(c(Age),c(Name),c(Gender))
subset(DataFrame,Gender=="M")
z = 0:9
d = as.character(z)
d
25,76 -> f
(25,76) -> f
data("AirPassengers")
x = data("AirPassengers")
x
x = data(AirPassengers)
x
x <- c(2, 4, 6, 8)
y <- c(TRUE, TRUE, FALSE, TRUE)
z = sum(x[y])
z
x[y]
x[TRUE]
x[FALSE]
# adding rows and columns
a = 1:4
b = 5:8
d = rbind(a,b)
e = 11:12
f = cbind(d,e)
C(f)
f
C(f)
c(f)
A = matrix(1:9,nrow=3,byrow=T)
B = matrix(10:18,nrow=3,byrow=T)
A * B
A
b
B
A%*%B
A/B
A%/%B
B%/%A
A%B
A%%B
A%%%B
a=1:10
b=5:15
union(a,b)
intersect(a,b)
setdiff(a,b) #elements that are in "a" but not b.
setdiff(b,a)
m = matrix(1:9,nrow=3)
m
list1 = list(a,b,m)
list1
b
##List - heterogenuous collection of data.
# can have vectors, matrices, lists etc.
#create
a = c(1:3)
b = c('x','y','z')
m = matrix(1:9,nrow=3)
list1 = list(a,b,m)
list1
list2 = list(l1=a,l2=b,k=m)
list2
k
$k
list2[k[1,3]] = 12
list2[$k[1,3]] = 12
a[1]
list1[1]
list1[[1,2]]
list1[c[1,2]]
list1[c(1,2)]
list1[[c(1,2)]]
list1[[3]]
list1[[3,8]]
list1[[c(3,8)]]
list1[[c(1,3)]]
##List - heterogenuous collection of data.
# can have vectors, matrices, lists etc.
#create
a = c(1:3)
b = c('x','y','z')
m  = matrix(1:9,nrow=3,byrow=T)
list1 = list(a,b,m)
list2 = list(l1=a,l2=b,k=m)
## *** Accessing elements
list1[[c(1,2)]]
list1[[3]]
list1[[c(3,8)]]
list1[[c(1,3)]]
list1[[1][2,3]]
list1[[1],c[2,3]]
list1[[1]c[2,3]]
list1[[1]]c[2,3]]
list1[[1]]c[2,3]
list1[[1]][c(2,3)]
list1[[3]][c(8)]
list1[[3]][c(2,3)]
list1[[3]][c[2,3]]
list1[[3]][2,3]
list1[[3]][-2,-3]
list1[[3]][-(2,3)]
list1[[3]][-[2,3]]
list1[[3]][-c(2,3)]
list1[[3]][-c(2,3),]
list1[[3]][-c(2,3),3] = 12
list1
list[[2]] = c(7:9)
list[[2]] = c(7,8,9)
list[[2]] = c('a','b','c')
list1[[2]] = c('a','b','c')
list1[[2]] = c(7,8,9)
list1[[2]]
list1
list1[[3]][-c(1),] = 13
list1[[3]]
list2$k
list1$k
# can also be assigned as below
list1 = list(a=c(1:3),b = c('x','y','z'),m  = matrix(1:9,nrow=3,byrow=T))
list1
list1$m[3]
list1$m[3,2] = 13
list1$m
list1[a]
list1['a']
list1["a"]
list1[['a']]
list1$a
list1[["a"]]
list2[k]
list2['k']
list2[['k']]
list2["k"]
list2[["k"]]
unlist(list2)
#** Naming list objects.
names(list1)
attach(list1)
detach(list1)
list1
attach(list1)
list1
a
a[1]
m[3]
m[3,2]
# creating data frames - unlike vectors/matrices data frames has heterogenuous elements(just like lists)
# similar to matrix but with heterogenous elements.. can have mixed types of data.
a = c(1:4,NA)
b = c(5:7,NA,8)
c = c(9,10,NA,11,12)
d = c('x','y','z','u','v')
f = data.frame(a,b,c,d)
f
# creating data frames - unlike vectors/matrices data frames has heterogenuous elements(just like lists)
# similar to matrix but with heterogenous elements.. can have mixed types of data.
a = c(1:4,NA)
b = c(5:7,NA,8)
c = c(9,10,NA,11,12)
d = c('x','y','z','u','v')
f = data.frame(a,b,c,d)
e = c(3:6)
fe = cbind(f,e)
# creating data frames - unlike vectors/matrices data frames has heterogenuous elements(just like lists)
# similar to matrix but with heterogenous elements.. can have mixed types of data.
a = c(1:4,NA)
b = c(5:7,NA,8)
c = c(9,10,NA,11,12)
d = c('x','y','z','u','v')
f = data.frame(a,b,c,d)
e = c(3:7)
fe = cbind(f,e)
fe
rbind(f,f)
f
cbind(f,fe,f)
## **** Stack & Unstack
sx = stack(f)
sx
sx[a]
sx(a)
ux = unstack(f)
ux
ux = unstack(sx)
na.omit(f)
f
na.omit(sx)
## ** View & fix
View(f)
f
view(f)
View(f)
library(base, lib.loc = "C:/Program Files/R/R-3.6.1/library")
View(f)
fix(f)
f
tr = t(fe)
tr
t(f)
head(cind(f,f))
head(cbind(f,f))
tail(cbind(f,fe))
head(rbind(f,f))
tail(rbind(f,fe))
tail(rbind(f,f))
##**** Accessinf specified element ** ##############
f[2,3]
f[-2,3]
f[2:3,1]
f[c(1,2),c(3,4)]
f[b]
f["b"]
f['b']
f['a','b']
f[c('a','b')]
f[1:3,c('a','b')]
f$a
is.na(f$a)
dim(y)
dim(f)
length(f)
ls
pwd
install.packages("caret")
library(caret)
library(data.table)
library(dplyr)
library(ipred)
library(plyr)
library(tidyr)
library(rlang)
library(dplyr)
